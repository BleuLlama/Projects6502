#!/usr/bin/perl
#
# Cheesy parser for .lst files.
#
#   loads in cc65 created .lst files, exports C structures
#   Made for the KIM Uno Remix project, during RC2016/1 Retro Challenge
#
#  NOTE: this only works for contiguous data, it assumes everything is 
#        sequential starting at the start address.
#
#  2016-01-12  yorgle@gmail.com
#

$file = $ARGV[0];

open FP, "<$file" or die "Cannot open file!";

printf " Reading file: %s\n", $file;

$firstaddr = "";
@bytes = ();

foreach $line ( <FP> )
{
	chomp $line;
	
	# the fields are:
	# ADDR 1 A B C xxxxx
	# address, then A byte or A&B bytes or A&B&C bytes
	($addr, $j0, $o1, $o2, $o3 ) = split / +/, $line;

	#printf( "%s\n", $line );

	# if we got a byte 
	if( uc $o1 eq sprintf( "%02X", hex $o1 ) ) {
		#printf( "  READ >> (%s) ", $addr );
		#printf( "%s ", $o1 );
		push @bytes, $o1;

		# stash aside the first address
		if( $firstaddr eq "" ) {
			$firstaddr = $addr;
		}

		# if we got a second byte...
		if( uc $o2 eq sprintf( "%02X", hex $o2 ) ) {
			#printf( "%s ", $o2 );
			push @bytes, $o2;

			# if we got a third byte...
			if( uc $o3 eq sprintf( "%02X", hex $o3 ) ) {
				#printf( "%s ", $o3 );
				push @bytes, $o3;
			}
		}
		#printf( "\n" );
	}
}

close FP;

if( $firstaddr eq "" ) {
	printf( "No data bytes found. Bad file?\n" );
	return;
}

printf( "   Bytes read: %d\n", scalar @bytes );
printf( "Start address: %s\n", $firstaddr );
printf( "\n\n" );

$projectname = $file;
$projectname =~ s{\.[^.]+$}{};
printf( "/* Code for project %s */\n", $projectname );
printf( "/*  generated by lst2c.pl */\n" );
printf( "\n" );
printf( "#define kROMSize_%s  (%d)\n", $projectname, scalar @bytes );
printf( "const unsigned char ROM_%s[ kROMSize_%s ] PROGMEM = {\n",
	$projectname, $projectname );

$nper = 0;
$maxline = 10;
$idx = 0;

foreach $x ( @bytes )
{
	if( $nper == 0 ) {
		printf( "      " );
	}
	$idx++;
	printf( "0x%s", $x );
	if( $idx != (scalar @bytes) ) {
		printf( ", " );
	}

	$nper++;
	if( $nper == $maxline ) {
		printf( "\n" );
		$nper = 0;
	}
}

if( $nper != $maxline ) {
	printf( "\n" );
}
printf( "};\n" );


